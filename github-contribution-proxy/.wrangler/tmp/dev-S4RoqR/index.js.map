{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Z9kjPy/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-Z9kjPy/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\Julien Fritsch\\Documents\\GitHub\\community-content\\github-contribution-proxy\\.wrangler\\tmp\\dev-S4RoqR",
  "sourcesContent": ["/**\n * Proxy s\u00E9curis\u00E9 pour l'API GitHub - Collectif Feydeau\n * \n * Ce Worker sert de proxy entre le frontend et l'API GitHub pour cr\u00E9er des issues\n * sans exposer le token d'authentification GitHub dans le code client.\n */\n\n// Interface pour l'environnement avec le token GitHub\ninterface Env {\n  GITHUB_TOKEN: string;\n}\n\n// Interface pour les donn\u00E9es de contribution\ninterface ContributionData {\n  title: string;\n  body: string;\n  labels?: string[];\n}\n\n// Interface pour les donn\u00E9es de suppression d'issue\ninterface DeleteIssueData {\n  issueNumber: string;\n}\n\n// Interface pour les donn\u00E9es de like/unlike\ninterface LikeIssueData {\n  issueNumber: string;\n  sessionId: string;\n  action: 'like' | 'unlike';\n}\n\n// Interface pour les donn\u00E9es de cr\u00E9ation de contribution\ninterface CreateContributionData {\n  entry: {\n    id: string;\n    type: string;\n    displayName: string;\n    content: string;\n    description: string;\n    createdAt: string;\n    timestamp: number;\n    likes: number;\n    moderation: string;\n  };\n  sessionId: string;\n}\n\nexport default {\n  // Fonction principale qui traite toutes les requ\u00EAtes\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    console.log(`Requ\u00EAte re\u00E7ue: ${request.method} ${request.url}`);\n    \n    // D\u00E9finir les en-t\u00EAtes CORS pour toutes les r\u00E9ponses\n    const corsHeaders = {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET, HEAD, POST, PUT, DELETE, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, X-Requested-With\",\n      \"Access-Control-Max-Age\": \"86400\",\n    };\n\n    // G\u00E9rer les requ\u00EAtes OPTIONS (preflight CORS)\n    if (request.method === \"OPTIONS\") {\n      console.log(\"Traitement d'une requ\u00EAte OPTIONS (preflight CORS)\");\n      return new Response(null, {\n        status: 204, // No Content\n        headers: corsHeaders\n      });\n    }\n\n    // V\u00E9rifier que c'est une requ\u00EAte POST\n    if (request.method !== \"POST\") {\n      return new Response(\"M\u00E9thode non autoris\u00E9e\", { \n        status: 405,\n        headers: corsHeaders\n      });\n    }\n\n    try {\n      console.log(\"Traitement d'une requ\u00EAte POST\");\n      \n      // D\u00E9terminer le type d'op\u00E9ration en fonction de l'URL\n      const url = new URL(request.url);\n      const path = url.pathname;\n      \n      // R\u00E9cup\u00E9rer les donn\u00E9es de la requ\u00EAte\n      const requestData = await request.json();\n      let githubResponse;\n      \n      // Traiter les diff\u00E9rents types de requ\u00EAtes\n      if (path === \"/create-contribution\") {\n        // Gestion de la cr\u00E9ation de contribution\n        const contributionData = requestData as CreateContributionData;\n        \n        // Valider les donn\u00E9es\n        if (!contributionData.entry || !contributionData.sessionId) {\n          return new Response(\"Donn\u00E9es invalides: entry et sessionId requis\", { \n            status: 400,\n            headers: corsHeaders\n          });\n        }\n        \n        const entry = contributionData.entry;\n        console.log(`Cr\u00E9ation d'une contribution GitHub: ${entry.displayName} (${entry.type})`);\n        \n        // Formater le titre de l'issue\n        const title = `${entry.type}: ${entry.displayName}`;\n        \n        // Formater le corps de l'issue avec toutes les m\u00E9tadonn\u00E9es\n        const body = `**Type:** ${entry.type}\n**Nom d'affichage:** ${entry.displayName}\n**Description:** ${entry.description}\n**Contenu:** ${entry.content}\n**Cr\u00E9\u00E9 le:** ${entry.createdAt}\n**Timestamp:** ${entry.timestamp}\n**Likes:** ${entry.likes}\n**Mod\u00E9ration:** ${entry.moderation}\n**ID:** ${entry.id}\n**Session:** ${contributionData.sessionId}`;\n        \n        // D\u00E9finir les labels appropri\u00E9s selon le type de contribution\n        const labels = [\"contribution\"];\n        if (entry.type) {\n          labels.push(entry.type.toLowerCase());\n        }\n        if (entry.moderation === 'pending') {\n          labels.push(\"moderation-pending\");\n        }\n        \n        try {\n          // Cr\u00E9er l'issue GitHub\n          githubResponse = await fetch(\n            \"https://api.github.com/repos/CollectifIleFeydeau/community-content/issues\",\n            {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/vnd.github.v3+json\",\n                \"Authorization\": `token ${env.GITHUB_TOKEN}`,\n                \"User-Agent\": \"Cloudflare-Worker-CollectifFeydeau\"\n              },\n              body: JSON.stringify({\n                title: title,\n                body: body,\n                labels: labels\n              })\n            }\n          );\n          \n          if (!githubResponse.ok) {\n            console.error(`Erreur lors de la cr\u00E9ation de la contribution: ${githubResponse.status}`);\n            const errorBody = await githubResponse.text();\n            console.error(`D\u00E9tail de l'erreur: ${errorBody}`);\n            \n            return new Response(`Erreur lors de la cr\u00E9ation de la contribution: ${githubResponse.status}\\n${errorBody}`, {\n              status: githubResponse.status,\n              headers: corsHeaders\n            });\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';\n          console.error(`Erreur lors de la cr\u00E9ation de la contribution: ${errorMessage}`);\n          \n          return new Response(`Erreur lors de la cr\u00E9ation de la contribution: ${errorMessage}`, {\n            status: 500,\n            headers: corsHeaders\n          });\n        }\n        \n      } else if (path === \"/like-issue\") {\n        // Gestion des likes\n        const likeData = requestData as LikeIssueData;\n        \n        // Valider les donn\u00E9es\n        if (!likeData.issueNumber || !likeData.sessionId || !likeData.action) {\n          return new Response(\"Donn\u00E9es invalides: num\u00E9ro d'issue, sessionId et action requis\", { \n            status: 400,\n            headers: corsHeaders\n          });\n        }\n        \n        console.log(`${likeData.action === 'like' ? 'Like' : 'Unlike'} de l'issue GitHub #${likeData.issueNumber} par ${likeData.sessionId}`);\n        \n        try {\n          // 1. R\u00E9cup\u00E9rer l'issue actuelle pour obtenir les donn\u00E9es existantes\n          const issueResponse = await fetch(\n            `https://api.github.com/repos/CollectifIleFeydeau/community-content/issues/${likeData.issueNumber}`,\n            {\n              headers: {\n                \"Accept\": \"application/vnd.github.v3+json\",\n                \"Authorization\": `token ${env.GITHUB_TOKEN}`,\n                \"User-Agent\": \"Cloudflare-Worker-CollectifFeydeau\"\n              }\n            }\n          );\n          \n          if (!issueResponse.ok) {\n            return new Response(`Erreur lors de la r\u00E9cup\u00E9ration de l'issue: ${issueResponse.status}`, {\n              status: issueResponse.status,\n              headers: corsHeaders\n            });\n          }\n          \n          const issue = await issueResponse.json() as { body?: string };\n          \n          // 2. Extraire les donn\u00E9es de likes existantes du corps de l'issue\n          const body = issue.body || '';\n          let likesCount = 0;\n          let likedBy: string[] = [];\n          \n          // Rechercher les m\u00E9tadonn\u00E9es de likes dans le corps de l'issue\n          const likesMatch = body.match(/\\*\\*Likes:\\*\\*\\s*(\\d+)/);\n          if (likesMatch && likesMatch[1]) {\n            likesCount = parseInt(likesMatch[1], 10);\n          }\n          \n          const likedByMatch = body.match(/\\*\\*LikedBy:\\*\\*\\s*(.+)/);\n          if (likedByMatch && likedByMatch[1]) {\n            likedBy = likedByMatch[1].split(',').map((id: string) => id.trim());\n          }\n          \n          // 3. Mettre \u00E0 jour les donn\u00E9es de likes en fonction de l'action\n          if (likeData.action === 'like') {\n            if (!likedBy.includes(likeData.sessionId)) {\n              likedBy.push(likeData.sessionId);\n              likesCount++;\n            }\n          } else { // unlike\n            likedBy = likedBy.filter(id => id !== likeData.sessionId);\n            if (likesCount > 0) likesCount--;\n          }\n          \n          // 4. Construire le nouveau corps de l'issue avec les donn\u00E9es de likes mises \u00E0 jour\n          let newBody = body;\n          \n          // Mettre \u00E0 jour ou ajouter le nombre de likes\n          if (likesMatch) {\n            newBody = newBody.replace(/\\*\\*Likes:\\*\\*\\s*\\d+/, `**Likes:** ${likesCount}`);\n          } else {\n            // Ajouter \u00E0 la fin du corps\n            newBody += `\\n\\n**Likes:** ${likesCount}`;\n          }\n          \n          // Mettre \u00E0 jour ou ajouter la liste des utilisateurs qui ont lik\u00E9\n          if (likedByMatch) {\n            newBody = newBody.replace(/\\*\\*LikedBy:\\*\\*\\s*.+/, `**LikedBy:** ${likedBy.join(', ')}`);\n          } else if (likedBy.length > 0) {\n            // Ajouter \u00E0 la fin du corps\n            newBody += `\\n**LikedBy:** ${likedBy.join(', ')}`;\n          }\n          \n          // 5. Mettre \u00E0 jour l'issue avec le nouveau corps\n          githubResponse = await fetch(\n            `https://api.github.com/repos/CollectifIleFeydeau/community-content/issues/${likeData.issueNumber}`,\n            {\n              method: \"PATCH\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/vnd.github.v3+json\",\n                \"Authorization\": `token ${env.GITHUB_TOKEN}`,\n                \"User-Agent\": \"Cloudflare-Worker-CollectifFeydeau\"\n              },\n              body: JSON.stringify({\n                body: newBody\n              })\n            }\n          );\n          \n          // 6. Pr\u00E9parer la r\u00E9ponse avec les donn\u00E9es mises \u00E0 jour\n          if (githubResponse.ok) {\n            return new Response(JSON.stringify({\n              success: true,\n              likes: likesCount,\n              likedBy: likedBy,\n              isLikedByCurrentUser: likedBy.includes(likeData.sessionId)\n            }), {\n              status: 200,\n              headers: {\n                \"Content-Type\": \"application/json\",\n                ...corsHeaders\n              }\n            });\n          }\n        } catch (error) {\n          console.error(`Erreur lors de la gestion du like: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);\n          return new Response(`Erreur lors de la gestion du like: ${error instanceof Error ? error.message : 'Erreur inconnue'}`, {\n            status: 500,\n            headers: corsHeaders\n          });\n        }\n      } else if (path === \"/delete-issue\") {\n        // Suppression d'une issue\n        const deleteData = requestData as DeleteIssueData;\n        \n        // Valider les donn\u00E9es\n        if (!deleteData.issueNumber) {\n          return new Response(\"Donn\u00E9es invalides: num\u00E9ro d'issue requis\", { \n            status: 400,\n            headers: corsHeaders\n          });\n        }\n        \n        console.log(`Suppression de l'issue GitHub #${deleteData.issueNumber}`);\n        \n        try {\n          // V\u00E9rifier d'abord si l'issue existe\n          const checkResponse = await fetch(\n            `https://api.github.com/repos/CollectifIleFeydeau/community-content/issues/${deleteData.issueNumber}`,\n            {\n              headers: {\n                \"Accept\": \"application/vnd.github.v3+json\",\n                \"Authorization\": `token ${env.GITHUB_TOKEN}`,\n                \"User-Agent\": \"Cloudflare-Worker-CollectifFeydeau\"\n              }\n            }\n          );\n          \n          if (!checkResponse.ok) {\n            console.error(`Erreur lors de la v\u00E9rification de l'issue #${deleteData.issueNumber}: ${checkResponse.status}`);\n            const errorBody = await checkResponse.text();\n            console.error(`D\u00E9tail de l'erreur: ${errorBody}`);\n            \n            return new Response(`Erreur lors de la v\u00E9rification de l'issue: ${checkResponse.status}\\n${errorBody}`, {\n              status: checkResponse.status,\n              headers: corsHeaders\n            });\n          }\n          \n          // Pr\u00E9parer la requ\u00EAte vers l'API GitHub pour fermer l'issue\n          githubResponse = await fetch(\n            `https://api.github.com/repos/CollectifIleFeydeau/community-content/issues/${deleteData.issueNumber}`,\n            {\n              method: \"PATCH\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/vnd.github.v3+json\",\n                \"Authorization\": `token ${env.GITHUB_TOKEN}`,\n                \"User-Agent\": \"Cloudflare-Worker-CollectifFeydeau\"\n              },\n              body: JSON.stringify({\n                state: \"closed\"\n              })\n            }\n          );\n          \n          if (!githubResponse.ok) {\n            console.error(`Erreur lors de la fermeture de l'issue #${deleteData.issueNumber}: ${githubResponse.status}`);\n            const errorBody = await githubResponse.text();\n            console.error(`D\u00E9tail de l'erreur: ${errorBody}`);\n            \n            return new Response(`Erreur lors de la fermeture de l'issue: ${githubResponse.status}\\n${errorBody}`, {\n              status: githubResponse.status,\n              headers: corsHeaders\n            });\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';\n          console.error(`Erreur lors de la suppression de l'issue #${deleteData.issueNumber}: ${errorMessage}`);\n          \n          return new Response(`Erreur lors de la suppression de l'issue: ${errorMessage}`, {\n            status: 500,\n            headers: corsHeaders\n          });\n        }\n      } else {\n        // Cr\u00E9ation d'une issue (comportement par d\u00E9faut)\n        const data = requestData as ContributionData;\n        \n        // Valider les donn\u00E9es\n        if (!data.title || !data.body) {\n          return new Response(\"Donn\u00E9es invalides: titre et corps requis\", { \n            status: 400,\n            headers: corsHeaders\n          });\n        }\n\n        console.log(`Cr\u00E9ation d'une issue GitHub: ${data.title}`);\n        \n        // Pr\u00E9parer la requ\u00EAte vers l'API GitHub\n        githubResponse = await fetch(\n          \"https://api.github.com/repos/CollectifIleFeydeau/community-content/issues\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/vnd.github.v3+json\",\n              \"Authorization\": `token ${env.GITHUB_TOKEN}`,\n              \"User-Agent\": \"Cloudflare-Worker-CollectifFeydeau\"\n            },\n            body: JSON.stringify({\n              title: data.title,\n              body: data.body,\n              labels: data.labels || []\n            })\n          }\n        );\n      }\n\n      // R\u00E9cup\u00E9rer la r\u00E9ponse de GitHub\n      const githubData = await githubResponse.json();\n      console.log(`R\u00E9ponse de GitHub: ${githubResponse.status}`);\n      \n      // Retourner la r\u00E9ponse avec les en-t\u00EAtes CORS\n      return new Response(JSON.stringify(githubData), {\n        status: githubResponse.status,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...corsHeaders\n        }\n      });\n    } catch (error: unknown) {\n      // G\u00E9rer les erreurs\n      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';\n      console.error(`Erreur: ${errorMessage}`);\n      return new Response(`Erreur: ${errorMessage}`, { \n        status: 500,\n        headers: corsHeaders\n      });\n    }\n  },\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\Julien Fritsch\\\\Documents\\\\GitHub\\\\community-content\\\\github-contribution-proxy\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\Julien Fritsch\\\\Documents\\\\GitHub\\\\community-content\\\\github-contribution-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\Julien Fritsch\\\\Documents\\\\GitHub\\\\community-content\\\\github-contribution-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\Julien Fritsch\\\\Documents\\\\GitHub\\\\community-content\\\\github-contribution-proxy\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\Julien Fritsch\\\\Documents\\\\GitHub\\\\community-content\\\\github-contribution-proxy\\\\.wrangler\\\\tmp\\\\bundle-Z9kjPy\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\Julien Fritsch\\\\Documents\\\\GitHub\\\\community-content\\\\github-contribution-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\Julien Fritsch\\\\Documents\\\\GitHub\\\\community-content\\\\github-contribution-proxy\\\\.wrangler\\\\tmp\\\\bundle-Z9kjPy\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\Julien Fritsch\\\\Documents\\\\GitHub\\\\community-content\\\\github-contribution-proxy\\\\.wrangler\\\\tmp\\\\bundle-Z9kjPy\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
